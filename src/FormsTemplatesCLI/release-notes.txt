Join me on Developer Thoughts (https://egvijayanand.in/), an exclusive blog for articles on Xamarin.Forms, .NET MAUI and Blazor.

What's new in ver. 1.8.0:
-------------------------
Introduced using the NuGet CPM feature from within Visual Studio IDE.

v1.7.0

1. An innovative generic item template, in XAML and C#, for creating items of any type.

And it is named forms-item and forms-item-cs

Both need one required parameter, -b / --base, the base type.

Optionally takes another parameter, -g / --generic, to specify the generic base type.

In addition, the XAML template takes one more parameter, -xo / --xaml-only, when defined, generates only the XAML definition.

Note: Namespace resolution in both XAML and C# file is left to the user as deriving them with the template is outside its scope.

Example:

dotnet new forms-item -n ThemePopup -b xct:Popup -p:na MyApp.Views

Output: ThemePopup.xaml and ThemePopup.xaml.cs

public partial class ThemePopup : Popup {}

dotnet new forms-item -n SearchPage -b FormsPage -g SearchViewModel -p:na MyApp.Views

Output: SearchPage.xaml and SearchPage.xaml.cs

public partial class SearchPage : FormsPage<SearchViewModel> {}

2. Introduced an item template to generate Page and its ViewModel in a single command, available for both XAML and C#.

The Page will be generated in the Views folder and ViewModel will be generated in the ViewModels folder.

Can also be overridden to generate in the same folder with the -sf | --same-folder option.

The ViewModels are generated with the base class titled BaseViewModel (implementation left to the user).

Including CommunityToolkit.Mvvm, an officially supported NuGet package, would be the best fit as it makes it easy to work with the MVVM design pattern.

And it's recommended to use this MVVM template from the project root. So that output is aligned to the folder structure.

Note: Don't suffix anything to the name, it'll be included automatically.

dotnet new forms-mvvm -n Login -p:na MyApp

dotnet new forms-mvvm-cs -n Search -p:na MyApp

Output structure:

XAML:

ViewModels
    LoginViewModel.cs
Views
    LoginPage.xaml
    LoginPage.xaml.cs

C#:

ViewModels
    SearchViewModel.cs
Views
    SearchPage.cs

v1.6.0:

1. Introduced an option to add a reference to Xamarin.Essentials.Interfaces NuGet package, an explicit option

2. Auto inclusion of the Type of the Item template that is created for Page, Shell, and Views

Just mention only the name of the item that is to be created. Item Type and File Extension would be automatically added.

dotnet new forms-page -n Home -p:na MyApp.Views

dotnet new forms-page-cs -n Settings -p:na MyApp.Views

dotnet new forms-view -n Card -p:na MyApp.Views

dotnet new forms-view-cs -n Order -p:na MyApp.Views

v1.5.0:

1. Introduced an option to add a reference to all supported NuGet packages by specifying a single parameter

-asp | --all-supported-packages -> The default value is false.

dotnet new formsclasslib -o FormsLib -asp

2. Option to reference the Shared Toolkit NuGet package

-ist | --include-shared-toolkit -> The default value is false.

dotnet new formsclasslib -o FormsLib -ist

3. Introduced an option to support the NuGet Central Package Management (CPM) feature

-cpm | --central-pkg-mgmt -> The default value is false.

dotnet new formsclasslib -o FormsLib -cpm

Note: For now, the CPM feature is only supported on CLI.

v1.4.4:

Package versions bumped to pull the latest stable version.

v1.4.3:

1. Package versions have been made dynamic to pull the latest stable version.

2. Added a new item template for Shell definition in C#

dotnet new forms-shell-cs -n AppShell -na MyLib

v1.4.2:

Little housekeeping to improve the reliability of the templates.

v1.4.1

Xamarin.Forms version bumped to 5.0.0.2515 (SR12).

Option to the choose the library target framework - .NET Standard 2.0 / 2.1

v1.4.0:

Included an option to add reference Xamarin.Essentials NuGet package during Xamarin.Forms class library creation.

Added new item templates for Forms Page and View in C#.

v1.3.1:

Included the IsExternalInit class definition to make use of C# 9.0 features such as Records.
